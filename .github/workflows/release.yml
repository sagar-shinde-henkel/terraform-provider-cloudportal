name: Release Terraform Provider

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags (e.g., v1.2.3)

env:
  # Global environment variables
  env:
  TF_REGISTRY_API_TOKEN: ${{ secrets.TF_REGISTRY_API_TOKEN }}
  GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  HASHICORP_API_TOKEN: ${{ secrets.TF_REGISTRY_API_TOKEN }}

permissions:
  contents: write
  id-token: write  # Required for HashiCorp registry auth

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for full Git history
        

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gpg

      #- name: Import GPG Key
      #  env:
      #    GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}  # Your armored private key
      #  run: |
      #    echo "$GPG_PRIVATE_KEY" | gpg --batch --import
      #    # Disable passphrase prompts (critical for keys without passphrase)
      #    echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
      #    gpgconf --kill gpg-agent  # Restart agent to apply changes

      - name: Setup GPG (100% Non-Interactive)
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        run: |
          # Install minimal GPG (no GUI dependencies)
          sudo apt-get update && sudo apt-get install -y --no-install-recommends gnupg
          # Create secure directory
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          # Completely non-interactive import
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import 2>&1 | tee /tmp/import.log
          # Configure for CI environment
          cat <<EOF > ~/.gnupg/gpg.conf
          pinentry-mode loopback
          use-agent
          EOF
          cat <<EOF > ~/.gnupg/gpg-agent.conf
          allow-loopback-pinentry
          disable-scdaemon
          EOF
          # Set ultimate trust non-interactively
          echo -n "$(echo $GPG_KEY_ID | tr '[:upper:]' '[:lower:]'):6:" | gpg --import-ownertrust
          # Verify setup
          echo "=== GPG VERSION ==="
          gpg --version
          echo "=== LIST KEYS ==="
          gpg --list-secret-keys --keyid-format LONG
          echo "=== TEST SIGNING ==="
          echo "test123" | gpg --clearsign --batch --yes --pinentry-mode loopback --local-user "$GPG_KEY_ID" 2>&1 | tee /tmp/sigtest.log
          echo "=== TEST RESULTS ==="
          grep -A1 "BEGIN PGP SIGNED MESSAGE" /tmp/sigtest.log || echo "Signing test failed"
          # Kill and restart agent
          gpgconf --kill all
          gpgconf --launch gpg-agent
 
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Verify Environment
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}  # Explicitly set the env var for this step
        run: |
          echo "Using GPG Key ID: ${GPG_KEY_ID}"
          gpg --list-secret-keys "${GPG_KEY_ID}" || echo "Key listing failed"
          echo "Test signing:"
          echo "test" | gpg --clearsign --batch --yes --local-user "${GPG_KEY_ID}" || echo "Test signing failed"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}  # Pass the key ID to GoReleaser

      - name: Publish to Terraform Registry
        if: success()
        env:
          TF_REGISTRY_API_TOKEN: ${{ secrets.TF_REGISTRY_API_TOKEN }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          curl -X POST \
            -H "Authorization: Bearer $TF_REGISTRY_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "registry-provider-versions",
                "attributes": {
                  "version": "'"$VERSION"'",
                  "key-id": "'"$GPG_FINGERPRINT"'"
                }
              }
            }' \
            "https://registry.terraform.io/v2/providers/terrafprm-provider-cloudportal/cloudportal/versions"