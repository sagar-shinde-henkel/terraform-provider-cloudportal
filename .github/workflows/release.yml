name: Release Terraform Provider

on:
  push:
    tags:
      - "v*.*.*" # Triggers on semantic version tags (e.g., v1.2.3)

env:
  # Global environment variables
  env:
  TF_REGISTRY_API_TOKEN: ${{ secrets.TF_REGISTRY_API_TOKEN }}
  GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  HASHICORP_API_TOKEN: ${{ secrets.TF_REGISTRY_API_TOKEN }}


permissions:
  contents: write
  id-token: write # Required for HashiCorp registry auth

jobs:
  release:
    runs-on: ubuntu-latest
    environment: release
    env:
      GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for full Git history

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gpg

      - name: Import GPG Key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      # name: Setup GPG (Fixed Import)
      # env:
      #   GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      #   GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
      # run: |
      #   # Install minimal GPG
      #   sudo apt-get update && sudo apt-get install -y --no-install-recommends gnupg
      #   # Create secure directory
      #   mkdir -p ~/.gnupg
      #   chmod 700 ~/.gnupg
      #   # Write key to temporary file to avoid stdin issues
      #   echo "$GPG_PRIVATE_KEY" > /tmp/gpg_private.key
      #   gpg --batch --import /tmp/gpg_private.key
      #   rm -f /tmp/gpg_private.key
      #   # Configure non-interactive environment
      #   cat <<EOF > ~/.gnupg/gpg.conf
      #   pinentry-mode loopback
      #   use-agent
      #   EOF
      #   cat <<EOF > ~/.gnupg/gpg-agent.conf
      #   allow-loopback-pinentry
      #   disable-scdaemon
      #   EOF
      #   # Set ultimate trust
      #   echo "${GPG_KEY_ID}:6:" | gpg --import-ownertrust
      #   # Verify setup
      #   echo "=== IMPORT VERIFICATION ==="
      #   gpg --list-secret-keys --keyid-format LONG
      #   echo "=== TEST SIGNING ==="
      #   echo "test123" | gpg --clearsign --batch --yes --pinentry-mode loopback --local-user "$GPG_KEY_ID"

      #- name: Run GoReleaser
      # uses: goreleaser/goreleaser-action@v4
      # with:
      #   args: release
      # env:
      #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Environment
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }} # Explicitly set the env var for this step
        run: |
          echo "Using GPG Key ID: ${GPG_KEY_ID}"
          gpg --list-secret-keys "${GPG_KEY_ID}" || echo "Key listing failed"
          echo "Test signing:"
          echo "test" | gpg --clearsign --batch --yes --local-user "${GPG_KEY_ID}" || echo "Test signing failed"

      - name: Debug GPG
        run: |
          echo "Fingerprint: ${{ steps.import_gpg.outputs.fingerprint }}"
          gpg --list-secret-keys --with-colons

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          version: latest
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}  # Critical
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }} # Pass the key ID to GoReleaser

      - name: Publish to Terraform Registry
        if: success()
        env:
          TF_REGISTRY_API_TOKEN: ${{ secrets.TF_REGISTRY_API_TOKEN }}
          GPG_FINGERPRINT: ${{ secrets.GPG_FINGERPRINT }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          curl -v -X POST \
            -H "Authorization: Bearer $TF_REGISTRY_API_TOKEN" \
            -H "Content-Type: application/vnd.api+json" \
            -d '{
              "data": {
                "type": "registry-provider-versions",
                "attributes": {
                  "version": "'"$VERSION"'",
                  "key-id": "'"$GPG_FINGERPRINT"'"
                }
              }
            }' \
            "https://registry.terraform.io/v2/providers/sagar-shinde-henkel/cloudportal/versions"
